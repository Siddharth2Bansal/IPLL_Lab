%include 'functions.asm'

global _start

section .data
    da: db '3'
    test: db 'adg123   45 00'
section .bss
    arr: resd 10
    buf: resb 200
    n_ptr: resd 1
    k_ptr: resd 1
    e_code: resd 1
    sum: resd 1
section .text

_start:
    ; save n
    mov eax, buf
    call read_int
    mov dword[n_ptr], eax

    ; save k
    mov eax, buf
    call read_int
    mov dword[k_ptr], eax

    
    ; read line containing all numbers
    mov edx, 200
    mov ecx, buf
    mov ebx, 0
    mov eax, 3
    int 0x80

    mov eax, buf
    mov edx, 0
    loop:

    call skip_non_int
    mov ecx, eax
    call str_to_int
    mov dword[arr+edx*4], eax
    mov eax, ecx
    inc edx
    call skip_int
    cmp edx, dword[n_ptr]
    jne loop
    ; ; move into memory
    ; mov ecx, 0
    ; mov ebx, arr
    ; lop1:
    ; mov dword [ebx], eax
    ; inc ecx
    ; add ebx, 4
    ; cmp ecx, 10
    ; jne lop1
    ; set the correct exit code in 
    mov eax, dword[k_ptr]
    mov ebx, dword[n_ptr]
    mov dword[e_code], 1
    cmp eax, ebx
    jle ifff
    mov dword[e_code], 0
    mov dword[k_ptr], ebx
    ifff:

    mov edx, 0
    mov eax, 0
    last_loop:
    add eax, dword [arr+4*edx]
    inc edx
    cmp edx, dword[k_ptr]
    jne last_loop
    call print_int_nl

    ; print form memory
    mov ecx, 0
    mov ebx, arr
    loopie:
    mov eax, dword[ebx]
    call print_int_nl
    add ebx, 4
    inc ecx
    cmp ecx, dword[n_ptr]
    jne loopie


    mov eax, [e_code]
    call print_int_nl
    call exit