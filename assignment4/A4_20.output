Terminals unused in grammar

    DOT
    BITWISEOR
    HASH
    INVALID_TOKEN
    PARENTHESIS_CLOSE


Rules useless in parser due to conflicts

   74 block_item_list_opt: block_item_list
   75                    | %empty


State 16 conflicts: 17 shift/reduce, 1 reduce/reduce
State 31 conflicts: 1 shift/reduce
State 34 conflicts: 1 shift/reduce
State 35 conflicts: 2 shift/reduce
State 54 conflicts: 17 shift/reduce, 1 reduce/reduce
State 104 conflicts: 1 shift/reduce
State 105 conflicts: 1 shift/reduce
State 106 conflicts: 2 shift/reduce
State 107 conflicts: 2 shift/reduce
State 108 conflicts: 2 shift/reduce
State 109 conflicts: 2 shift/reduce
State 126 conflicts: 14 shift/reduce
State 133 conflicts: 1 shift/reduce
State 135 conflicts: 14 shift/reduce
State 139 conflicts: 14 shift/reduce


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | INTEGER_CONSTANT
    3                   | CHARACTER_CONSTANT
    4                   | STRING_LITERAL
    5                   | ROUND_BRACE_OPEN expression ROUND_BRACE_CLOSE

    6 argument_expression_list_opt: argument_expression_list
    7                             | %empty

    8 postfix_expression: primary_expression
    9                   | postfix_expression SQ_BRACE_OPEN expression SQ_BRACE_CLOSE
   10                   | postfix_expression ROUND_BRACE_OPEN argument_expression_list_opt ROUND_BRACE_CLOSE
   11                   | postfix_expression PTR IDENTIFIER

   12 argument_expression_list: assignment_expression
   13                         | argument_expression_list COMMA assignment_expression

   14 unary_expression: postfix_expression
   15                 | unary_operator unary_expression

   16 unary_operator: BITWISEAND
   17               | STAR
   18               | PLUS
   19               | MINUS
   20               | EXCLAMATION

   21 multiplicative_expression: unary_expression
   22                          | multiplicative_expression STAR unary_expression
   23                          | multiplicative_expression DIVIDE unary_expression
   24                          | multiplicative_expression PERCENTAGE unary_expression

   25 additive_expression: multiplicative_expression
   26                    | additive_expression PLUS multiplicative_expression
   27                    | additive_expression STAR multiplicative_expression

   28 relational_expression: additive_expression
   29                      | relational_expression LESS_THAN additive_expression
   30                      | relational_expression GREATER_THAN additive_expression
   31                      | relational_expression LTE_OP additive_expression
   32                      | relational_expression GTE_OP additive_expression

   33 equality_expression: relational_expression
   34                    | equality_expression EQ_OP relational_expression
   35                    | equality_expression NE_OP relational_expression

   36 logical_AND_expression: equality_expression
   37                       | logical_AND_expression AND_OP equality_expression

   38 logical_OR_expression: logical_AND_expression
   39                      | logical_OR_expression OR_OP equality_expression

   40 conditional_expression: logical_OR_expression
   41                       | logical_OR_expression QUESTION_MARK expression COLON conditional_expression

   42 assignment_expression: conditional_expression
   43                      | unary_expression EQ assignment_expression

   44 expression_opt: expression
   45               | %empty

   46 expression: assignment_expression

   47 declaration: type_specifier init_declarator SEMI_COLON

   48 init_declarator: declarator
   49                | declarator EQ initializer

   50 type_specifier: VOID
   51               | CHAR
   52               | INT

   53 declarator: pointer_opt direct_declarator

   54 direct_declarator: IDENTIFIER
   55                  | IDENTIFIER SQ_BRACE_OPEN INTEGER_CONSTANT SQ_BRACE_CLOSE
   56                  | IDENTIFIER ROUND_BRACE_OPEN parameter_list_opt ROUND_BRACE_CLOSE

   57 pointer_opt: pointer
   58            | %empty

   59 pointer: STAR

   60 parameter_list_opt: parameter_list
   61                   | %empty

   62 parameter_list: parameter_declaration
   63               | parameter_list COMMA parameter_declaration

   64 identifier_opt: IDENTIFIER
   65               | %empty

   66 parameter_declaration: type_specifier pointer_opt identifier_opt

   67 initializer: assignment_expression

   68 statement: compound_statement
   69          | expression_statement
   70          | selection_statement
   71          | iteration_statement
   72          | jump_statement

   73 compound_statement: CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE

   74 block_item_list_opt: block_item_list
   75                    | %empty

   76 block_item_list: block_item
   77                | block_item_list block_item

   78 block_item: declaration
   79           | statement

   80 expression_statement: expression_opt

   81 selection_statement: IF ROUND_BRACE_OPEN expression ROUND_BRACE_CLOSE statement
   82                    | IF ROUND_BRACE_OPEN expression ROUND_BRACE_CLOSE statement ELSE statement

   83 iteration_statement: FOR ROUND_BRACE_OPEN expression_opt SEMI_COLON expression_opt SEMI_COLON expression_opt ROUND_BRACE_CLOSE statement

   84 jump_statement: RETURN expression_opt SEMI_COLON

   85 translation_unit: function_definition
   86                 | declaration

   87 function_definition: type_specifier declarator compound_statement


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 1 11 54 55 56 64
    STRING_LITERAL (259) 4
    INTEGER_CONSTANT (260) 2 55
    CHARACTER_CONSTANT (261) 3
    PTR (262) 11
    EQ (263) 43 49
    CURLY_BRACE_OPEN (264) 73
    CURLY_BRACE_CLOSE (265) 73
    ROUND_BRACE_OPEN (266) 5 10 56 81 82 83
    ROUND_BRACE_CLOSE (267) 5 10 56 81 82 83
    SQ_BRACE_OPEN (268) 9 55
    SQ_BRACE_CLOSE (269) 9 55
    COLON (270) 41
    SEMI_COLON (271) 47 83 84
    QUESTION_MARK (272) 41
    EQ_OP (273) 34
    NE_OP (274) 35
    LTE_OP (275) 31
    GTE_OP (276) 32
    AND_OP (277) 37
    OR_OP (278) 39
    LESS_THAN (279) 29
    GREATER_THAN (280) 30
    DOT (281)
    BITWISEAND (282) 16
    BITWISEOR (283)
    STAR (284) 17 22 27 59
    PLUS (285) 18 26
    MINUS (286) 19
    EXCLAMATION (287) 20
    DIVIDE (288) 23
    PERCENTAGE (289) 24
    COMMA (290) 13 63
    HASH (291)
    VOID (292) 50
    CHAR (293) 51
    INT (294) 52
    IF (295) 81 82
    ELSE (296) 82
    FOR (297) 83
    RETURN (298) 84
    INVALID_TOKEN (299)
    PARENTHESIS_CLOSE (300)


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    primary_expression (47)
        on left: 1 2 3 4 5
        on right: 8
    argument_expression_list_opt (48)
        on left: 6 7
        on right: 10
    postfix_expression (49)
        on left: 8 9 10 11
        on right: 9 10 11 14
    argument_expression_list (50)
        on left: 12 13
        on right: 6 13
    unary_expression (51)
        on left: 14 15
        on right: 15 21 22 23 24 43
    unary_operator (52)
        on left: 16 17 18 19 20
        on right: 15
    multiplicative_expression (53)
        on left: 21 22 23 24
        on right: 22 23 24 25 26 27
    additive_expression (54)
        on left: 25 26 27
        on right: 26 27 28 29 30 31 32
    relational_expression (55)
        on left: 28 29 30 31 32
        on right: 29 30 31 32 33 34 35
    equality_expression (56)
        on left: 33 34 35
        on right: 34 35 36 37 39
    logical_AND_expression (57)
        on left: 36 37
        on right: 37 38
    logical_OR_expression (58)
        on left: 38 39
        on right: 39 40 41
    conditional_expression (59)
        on left: 40 41
        on right: 41 42
    assignment_expression (60)
        on left: 42 43
        on right: 12 13 43 46 67
    expression_opt (61)
        on left: 44 45
        on right: 80 83 84
    expression (62)
        on left: 46
        on right: 5 9 41 44 81 82
    declaration (63)
        on left: 47
        on right: 78 86
    init_declarator (64)
        on left: 48 49
        on right: 47
    type_specifier (65)
        on left: 50 51 52
        on right: 47 66 87
    declarator (66)
        on left: 53
        on right: 48 49 87
    direct_declarator (67)
        on left: 54 55 56
        on right: 53
    pointer_opt (68)
        on left: 57 58
        on right: 53 66
    pointer (69)
        on left: 59
        on right: 57
    parameter_list_opt (70)
        on left: 60 61
        on right: 56
    parameter_list (71)
        on left: 62 63
        on right: 60 63
    identifier_opt (72)
        on left: 64 65
        on right: 66
    parameter_declaration (73)
        on left: 66
        on right: 62 63
    initializer (74)
        on left: 67
        on right: 49
    statement (75)
        on left: 68 69 70 71 72
        on right: 79 81 82 83
    compound_statement (76)
        on left: 73
        on right: 68 87
    block_item_list_opt (77)
        on left: 74 75
        on right: 73
    block_item_list (78)
        on left: 76 77
        on right: 74 77
    block_item (79)
        on left: 78 79
        on right: 76 77
    expression_statement (80)
        on left: 80
        on right: 69
    selection_statement (81)
        on left: 81 82
        on right: 70
    iteration_statement (82)
        on left: 83
        on right: 71
    jump_statement (83)
        on left: 84
        on right: 72
    translation_unit (84)
        on left: 85 86
        on right: 0
    function_definition (85)
        on left: 87
        on right: 85


State 0

    0 $accept: . translation_unit $end

    VOID  shift, and go to state 1
    CHAR  shift, and go to state 2
    INT   shift, and go to state 3

    declaration          go to state 4
    type_specifier       go to state 5
    translation_unit     go to state 6
    function_definition  go to state 7


State 1

   50 type_specifier: VOID .

    $default  reduce using rule 50 (type_specifier)


State 2

   51 type_specifier: CHAR .

    $default  reduce using rule 51 (type_specifier)


State 3

   52 type_specifier: INT .

    $default  reduce using rule 52 (type_specifier)


State 4

   86 translation_unit: declaration .

    $default  reduce using rule 86 (translation_unit)


State 5

   47 declaration: type_specifier . init_declarator SEMI_COLON
   87 function_definition: type_specifier . declarator compound_statement

    STAR  shift, and go to state 8

    $default  reduce using rule 58 (pointer_opt)

    init_declarator  go to state 9
    declarator       go to state 10
    pointer_opt      go to state 11
    pointer          go to state 12


State 6

    0 $accept: translation_unit . $end

    $end  shift, and go to state 13


State 7

   85 translation_unit: function_definition .

    $default  reduce using rule 85 (translation_unit)


State 8

   59 pointer: STAR .

    $default  reduce using rule 59 (pointer)


State 9

   47 declaration: type_specifier init_declarator . SEMI_COLON

    SEMI_COLON  shift, and go to state 14


State 10

   48 init_declarator: declarator .
   49                | declarator . EQ initializer
   87 function_definition: type_specifier declarator . compound_statement

    EQ                shift, and go to state 15
    CURLY_BRACE_OPEN  shift, and go to state 16

    $default  reduce using rule 48 (init_declarator)

    compound_statement  go to state 17


State 11

   53 declarator: pointer_opt . direct_declarator

    IDENTIFIER  shift, and go to state 18

    direct_declarator  go to state 19


State 12

   57 pointer_opt: pointer .

    $default  reduce using rule 57 (pointer_opt)


State 13

    0 $accept: translation_unit $end .

    $default  accept


State 14

   47 declaration: type_specifier init_declarator SEMI_COLON .

    $default  reduce using rule 47 (declaration)


State 15

   49 init_declarator: declarator EQ . initializer

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 41
    initializer                go to state 42


State 16

   73 compound_statement: CURLY_BRACE_OPEN . block_item_list_opt CURLY_BRACE_CLOSE

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    CURLY_BRACE_OPEN    shift, and go to state 16
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29
    VOID                shift, and go to state 1
    CHAR                shift, and go to state 2
    INT                 shift, and go to state 3
    IF                  shift, and go to state 43
    FOR                 shift, and go to state 44
    RETURN              shift, and go to state 45

    IDENTIFIER          [reduce using rule 45 (expression_opt)]
    STRING_LITERAL      [reduce using rule 45 (expression_opt)]
    INTEGER_CONSTANT    [reduce using rule 45 (expression_opt)]
    CHARACTER_CONSTANT  [reduce using rule 45 (expression_opt)]
    CURLY_BRACE_OPEN    [reduce using rule 45 (expression_opt)]
    CURLY_BRACE_CLOSE   reduce using rule 45 (expression_opt)
    CURLY_BRACE_CLOSE   [reduce using rule 75 (block_item_list_opt)]
    ROUND_BRACE_OPEN    [reduce using rule 45 (expression_opt)]
    BITWISEAND          [reduce using rule 45 (expression_opt)]
    STAR                [reduce using rule 45 (expression_opt)]
    PLUS                [reduce using rule 45 (expression_opt)]
    MINUS               [reduce using rule 45 (expression_opt)]
    EXCLAMATION         [reduce using rule 45 (expression_opt)]
    VOID                [reduce using rule 45 (expression_opt)]
    CHAR                [reduce using rule 45 (expression_opt)]
    INT                 [reduce using rule 45 (expression_opt)]
    IF                  [reduce using rule 45 (expression_opt)]
    FOR                 [reduce using rule 45 (expression_opt)]
    RETURN              [reduce using rule 45 (expression_opt)]
    $default            reduce using rule 45 (expression_opt)

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 46
    expression_opt             go to state 47
    expression                 go to state 48
    declaration                go to state 49
    type_specifier             go to state 50
    statement                  go to state 51
    compound_statement         go to state 52
    block_item_list_opt        go to state 53
    block_item_list            go to state 54
    block_item                 go to state 55
    expression_statement       go to state 56
    selection_statement        go to state 57
    iteration_statement        go to state 58
    jump_statement             go to state 59


State 17

   87 function_definition: type_specifier declarator compound_statement .

    $default  reduce using rule 87 (function_definition)


State 18

   54 direct_declarator: IDENTIFIER .
   55                  | IDENTIFIER . SQ_BRACE_OPEN INTEGER_CONSTANT SQ_BRACE_CLOSE
   56                  | IDENTIFIER . ROUND_BRACE_OPEN parameter_list_opt ROUND_BRACE_CLOSE

    ROUND_BRACE_OPEN  shift, and go to state 60
    SQ_BRACE_OPEN     shift, and go to state 61

    $default  reduce using rule 54 (direct_declarator)


State 19

   53 declarator: pointer_opt direct_declarator .

    $default  reduce using rule 53 (declarator)


State 20

    1 primary_expression: IDENTIFIER .

    $default  reduce using rule 1 (primary_expression)


State 21

    4 primary_expression: STRING_LITERAL .

    $default  reduce using rule 4 (primary_expression)


State 22

    2 primary_expression: INTEGER_CONSTANT .

    $default  reduce using rule 2 (primary_expression)


State 23

    3 primary_expression: CHARACTER_CONSTANT .

    $default  reduce using rule 3 (primary_expression)


State 24

    5 primary_expression: ROUND_BRACE_OPEN . expression ROUND_BRACE_CLOSE

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 46
    expression                 go to state 62


State 25

   16 unary_operator: BITWISEAND .

    $default  reduce using rule 16 (unary_operator)


State 26

   17 unary_operator: STAR .

    $default  reduce using rule 17 (unary_operator)


State 27

   18 unary_operator: PLUS .

    $default  reduce using rule 18 (unary_operator)


State 28

   19 unary_operator: MINUS .

    $default  reduce using rule 19 (unary_operator)


State 29

   20 unary_operator: EXCLAMATION .

    $default  reduce using rule 20 (unary_operator)


State 30

    8 postfix_expression: primary_expression .

    $default  reduce using rule 8 (postfix_expression)


State 31

    9 postfix_expression: postfix_expression . SQ_BRACE_OPEN expression SQ_BRACE_CLOSE
   10                   | postfix_expression . ROUND_BRACE_OPEN argument_expression_list_opt ROUND_BRACE_CLOSE
   11                   | postfix_expression . PTR IDENTIFIER
   14 unary_expression: postfix_expression .

    PTR               shift, and go to state 63
    ROUND_BRACE_OPEN  shift, and go to state 64
    SQ_BRACE_OPEN     shift, and go to state 65

    ROUND_BRACE_OPEN  [reduce using rule 14 (unary_expression)]
    $default          reduce using rule 14 (unary_expression)


State 32

   21 multiplicative_expression: unary_expression .
   43 assignment_expression: unary_expression . EQ assignment_expression

    EQ  shift, and go to state 66

    $default  reduce using rule 21 (multiplicative_expression)


State 33

   15 unary_expression: unary_operator . unary_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression  go to state 30
    postfix_expression  go to state 31
    unary_expression    go to state 67
    unary_operator      go to state 33


State 34

   22 multiplicative_expression: multiplicative_expression . STAR unary_expression
   23                          | multiplicative_expression . DIVIDE unary_expression
   24                          | multiplicative_expression . PERCENTAGE unary_expression
   25 additive_expression: multiplicative_expression .

    STAR        shift, and go to state 68
    DIVIDE      shift, and go to state 69
    PERCENTAGE  shift, and go to state 70

    STAR      [reduce using rule 25 (additive_expression)]
    $default  reduce using rule 25 (additive_expression)


State 35

   26 additive_expression: additive_expression . PLUS multiplicative_expression
   27                    | additive_expression . STAR multiplicative_expression
   28 relational_expression: additive_expression .

    STAR  shift, and go to state 71
    PLUS  shift, and go to state 72

    STAR      [reduce using rule 28 (relational_expression)]
    PLUS      [reduce using rule 28 (relational_expression)]
    $default  reduce using rule 28 (relational_expression)


State 36

   29 relational_expression: relational_expression . LESS_THAN additive_expression
   30                      | relational_expression . GREATER_THAN additive_expression
   31                      | relational_expression . LTE_OP additive_expression
   32                      | relational_expression . GTE_OP additive_expression
   33 equality_expression: relational_expression .

    LTE_OP        shift, and go to state 73
    GTE_OP        shift, and go to state 74
    LESS_THAN     shift, and go to state 75
    GREATER_THAN  shift, and go to state 76

    $default  reduce using rule 33 (equality_expression)


State 37

   34 equality_expression: equality_expression . EQ_OP relational_expression
   35                    | equality_expression . NE_OP relational_expression
   36 logical_AND_expression: equality_expression .

    EQ_OP  shift, and go to state 77
    NE_OP  shift, and go to state 78

    $default  reduce using rule 36 (logical_AND_expression)


State 38

   37 logical_AND_expression: logical_AND_expression . AND_OP equality_expression
   38 logical_OR_expression: logical_AND_expression .

    AND_OP  shift, and go to state 79

    $default  reduce using rule 38 (logical_OR_expression)


State 39

   39 logical_OR_expression: logical_OR_expression . OR_OP equality_expression
   40 conditional_expression: logical_OR_expression .
   41                       | logical_OR_expression . QUESTION_MARK expression COLON conditional_expression

    QUESTION_MARK  shift, and go to state 80
    OR_OP          shift, and go to state 81

    $default  reduce using rule 40 (conditional_expression)


State 40

   42 assignment_expression: conditional_expression .

    $default  reduce using rule 42 (assignment_expression)


State 41

   67 initializer: assignment_expression .

    $default  reduce using rule 67 (initializer)


State 42

   49 init_declarator: declarator EQ initializer .

    $default  reduce using rule 49 (init_declarator)


State 43

   81 selection_statement: IF . ROUND_BRACE_OPEN expression ROUND_BRACE_CLOSE statement
   82                    | IF . ROUND_BRACE_OPEN expression ROUND_BRACE_CLOSE statement ELSE statement

    ROUND_BRACE_OPEN  shift, and go to state 82


State 44

   83 iteration_statement: FOR . ROUND_BRACE_OPEN expression_opt SEMI_COLON expression_opt SEMI_COLON expression_opt ROUND_BRACE_CLOSE statement

    ROUND_BRACE_OPEN  shift, and go to state 83


State 45

   84 jump_statement: RETURN . expression_opt SEMI_COLON

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    $default  reduce using rule 45 (expression_opt)

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 46
    expression_opt             go to state 84
    expression                 go to state 48


State 46

   46 expression: assignment_expression .

    $default  reduce using rule 46 (expression)


State 47

   80 expression_statement: expression_opt .

    $default  reduce using rule 80 (expression_statement)


State 48

   44 expression_opt: expression .

    $default  reduce using rule 44 (expression_opt)


State 49

   78 block_item: declaration .

    $default  reduce using rule 78 (block_item)


State 50

   47 declaration: type_specifier . init_declarator SEMI_COLON

    STAR  shift, and go to state 8

    $default  reduce using rule 58 (pointer_opt)

    init_declarator  go to state 9
    declarator       go to state 85
    pointer_opt      go to state 11
    pointer          go to state 12


State 51

   79 block_item: statement .

    $default  reduce using rule 79 (block_item)


State 52

   68 statement: compound_statement .

    $default  reduce using rule 68 (statement)


State 53

   73 compound_statement: CURLY_BRACE_OPEN block_item_list_opt . CURLY_BRACE_CLOSE

    CURLY_BRACE_CLOSE  shift, and go to state 86


State 54

   74 block_item_list_opt: block_item_list .
   77 block_item_list: block_item_list . block_item

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    CURLY_BRACE_OPEN    shift, and go to state 16
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29
    VOID                shift, and go to state 1
    CHAR                shift, and go to state 2
    INT                 shift, and go to state 3
    IF                  shift, and go to state 43
    FOR                 shift, and go to state 44
    RETURN              shift, and go to state 45

    IDENTIFIER          [reduce using rule 45 (expression_opt)]
    STRING_LITERAL      [reduce using rule 45 (expression_opt)]
    INTEGER_CONSTANT    [reduce using rule 45 (expression_opt)]
    CHARACTER_CONSTANT  [reduce using rule 45 (expression_opt)]
    CURLY_BRACE_OPEN    [reduce using rule 45 (expression_opt)]
    CURLY_BRACE_CLOSE   reduce using rule 45 (expression_opt)
    CURLY_BRACE_CLOSE   [reduce using rule 74 (block_item_list_opt)]
    ROUND_BRACE_OPEN    [reduce using rule 45 (expression_opt)]
    BITWISEAND          [reduce using rule 45 (expression_opt)]
    STAR                [reduce using rule 45 (expression_opt)]
    PLUS                [reduce using rule 45 (expression_opt)]
    MINUS               [reduce using rule 45 (expression_opt)]
    EXCLAMATION         [reduce using rule 45 (expression_opt)]
    VOID                [reduce using rule 45 (expression_opt)]
    CHAR                [reduce using rule 45 (expression_opt)]
    INT                 [reduce using rule 45 (expression_opt)]
    IF                  [reduce using rule 45 (expression_opt)]
    FOR                 [reduce using rule 45 (expression_opt)]
    RETURN              [reduce using rule 45 (expression_opt)]
    $default            reduce using rule 45 (expression_opt)

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 46
    expression_opt             go to state 47
    expression                 go to state 48
    declaration                go to state 49
    type_specifier             go to state 50
    statement                  go to state 51
    compound_statement         go to state 52
    block_item                 go to state 87
    expression_statement       go to state 56
    selection_statement        go to state 57
    iteration_statement        go to state 58
    jump_statement             go to state 59


State 55

   76 block_item_list: block_item .

    $default  reduce using rule 76 (block_item_list)


State 56

   69 statement: expression_statement .

    $default  reduce using rule 69 (statement)


State 57

   70 statement: selection_statement .

    $default  reduce using rule 70 (statement)


State 58

   71 statement: iteration_statement .

    $default  reduce using rule 71 (statement)


State 59

   72 statement: jump_statement .

    $default  reduce using rule 72 (statement)


State 60

   56 direct_declarator: IDENTIFIER ROUND_BRACE_OPEN . parameter_list_opt ROUND_BRACE_CLOSE

    VOID  shift, and go to state 1
    CHAR  shift, and go to state 2
    INT   shift, and go to state 3

    $default  reduce using rule 61 (parameter_list_opt)

    type_specifier         go to state 88
    parameter_list_opt     go to state 89
    parameter_list         go to state 90
    parameter_declaration  go to state 91


State 61

   55 direct_declarator: IDENTIFIER SQ_BRACE_OPEN . INTEGER_CONSTANT SQ_BRACE_CLOSE

    INTEGER_CONSTANT  shift, and go to state 92


State 62

    5 primary_expression: ROUND_BRACE_OPEN expression . ROUND_BRACE_CLOSE

    ROUND_BRACE_CLOSE  shift, and go to state 93


State 63

   11 postfix_expression: postfix_expression PTR . IDENTIFIER

    IDENTIFIER  shift, and go to state 94


State 64

   10 postfix_expression: postfix_expression ROUND_BRACE_OPEN . argument_expression_list_opt ROUND_BRACE_CLOSE

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    $default  reduce using rule 7 (argument_expression_list_opt)

    primary_expression            go to state 30
    argument_expression_list_opt  go to state 95
    postfix_expression            go to state 31
    argument_expression_list      go to state 96
    unary_expression              go to state 32
    unary_operator                go to state 33
    multiplicative_expression     go to state 34
    additive_expression           go to state 35
    relational_expression         go to state 36
    equality_expression           go to state 37
    logical_AND_expression        go to state 38
    logical_OR_expression         go to state 39
    conditional_expression        go to state 40
    assignment_expression         go to state 97


State 65

    9 postfix_expression: postfix_expression SQ_BRACE_OPEN . expression SQ_BRACE_CLOSE

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 46
    expression                 go to state 98


State 66

   43 assignment_expression: unary_expression EQ . assignment_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 99


State 67

   15 unary_expression: unary_operator unary_expression .

    $default  reduce using rule 15 (unary_expression)


State 68

   22 multiplicative_expression: multiplicative_expression STAR . unary_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression  go to state 30
    postfix_expression  go to state 31
    unary_expression    go to state 100
    unary_operator      go to state 33


State 69

   23 multiplicative_expression: multiplicative_expression DIVIDE . unary_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression  go to state 30
    postfix_expression  go to state 31
    unary_expression    go to state 101
    unary_operator      go to state 33


State 70

   24 multiplicative_expression: multiplicative_expression PERCENTAGE . unary_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression  go to state 30
    postfix_expression  go to state 31
    unary_expression    go to state 102
    unary_operator      go to state 33


State 71

   27 additive_expression: additive_expression STAR . multiplicative_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 103
    unary_operator             go to state 33
    multiplicative_expression  go to state 104


State 72

   26 additive_expression: additive_expression PLUS . multiplicative_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 103
    unary_operator             go to state 33
    multiplicative_expression  go to state 105


State 73

   31 relational_expression: relational_expression LTE_OP . additive_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 103
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 106


State 74

   32 relational_expression: relational_expression GTE_OP . additive_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 103
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 107


State 75

   29 relational_expression: relational_expression LESS_THAN . additive_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 103
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 108


State 76

   30 relational_expression: relational_expression GREATER_THAN . additive_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 103
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 109


State 77

   34 equality_expression: equality_expression EQ_OP . relational_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 103
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 110


State 78

   35 equality_expression: equality_expression NE_OP . relational_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 103
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 111


State 79

   37 logical_AND_expression: logical_AND_expression AND_OP . equality_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 103
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 112


State 80

   41 conditional_expression: logical_OR_expression QUESTION_MARK . expression COLON conditional_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 46
    expression                 go to state 113


State 81

   39 logical_OR_expression: logical_OR_expression OR_OP . equality_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 103
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 114


State 82

   81 selection_statement: IF ROUND_BRACE_OPEN . expression ROUND_BRACE_CLOSE statement
   82                    | IF ROUND_BRACE_OPEN . expression ROUND_BRACE_CLOSE statement ELSE statement

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 46
    expression                 go to state 115


State 83

   83 iteration_statement: FOR ROUND_BRACE_OPEN . expression_opt SEMI_COLON expression_opt SEMI_COLON expression_opt ROUND_BRACE_CLOSE statement

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    $default  reduce using rule 45 (expression_opt)

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 46
    expression_opt             go to state 116
    expression                 go to state 48


State 84

   84 jump_statement: RETURN expression_opt . SEMI_COLON

    SEMI_COLON  shift, and go to state 117


State 85

   48 init_declarator: declarator .
   49                | declarator . EQ initializer

    EQ  shift, and go to state 15

    $default  reduce using rule 48 (init_declarator)


State 86

   73 compound_statement: CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE .

    $default  reduce using rule 73 (compound_statement)


State 87

   77 block_item_list: block_item_list block_item .

    $default  reduce using rule 77 (block_item_list)


State 88

   66 parameter_declaration: type_specifier . pointer_opt identifier_opt

    STAR  shift, and go to state 8

    $default  reduce using rule 58 (pointer_opt)

    pointer_opt  go to state 118
    pointer      go to state 12


State 89

   56 direct_declarator: IDENTIFIER ROUND_BRACE_OPEN parameter_list_opt . ROUND_BRACE_CLOSE

    ROUND_BRACE_CLOSE  shift, and go to state 119


State 90

   60 parameter_list_opt: parameter_list .
   63 parameter_list: parameter_list . COMMA parameter_declaration

    COMMA  shift, and go to state 120

    $default  reduce using rule 60 (parameter_list_opt)


State 91

   62 parameter_list: parameter_declaration .

    $default  reduce using rule 62 (parameter_list)


State 92

   55 direct_declarator: IDENTIFIER SQ_BRACE_OPEN INTEGER_CONSTANT . SQ_BRACE_CLOSE

    SQ_BRACE_CLOSE  shift, and go to state 121


State 93

    5 primary_expression: ROUND_BRACE_OPEN expression ROUND_BRACE_CLOSE .

    $default  reduce using rule 5 (primary_expression)


State 94

   11 postfix_expression: postfix_expression PTR IDENTIFIER .

    $default  reduce using rule 11 (postfix_expression)


State 95

   10 postfix_expression: postfix_expression ROUND_BRACE_OPEN argument_expression_list_opt . ROUND_BRACE_CLOSE

    ROUND_BRACE_CLOSE  shift, and go to state 122


State 96

    6 argument_expression_list_opt: argument_expression_list .
   13 argument_expression_list: argument_expression_list . COMMA assignment_expression

    COMMA  shift, and go to state 123

    $default  reduce using rule 6 (argument_expression_list_opt)


State 97

   12 argument_expression_list: assignment_expression .

    $default  reduce using rule 12 (argument_expression_list)


State 98

    9 postfix_expression: postfix_expression SQ_BRACE_OPEN expression . SQ_BRACE_CLOSE

    SQ_BRACE_CLOSE  shift, and go to state 124


State 99

   43 assignment_expression: unary_expression EQ assignment_expression .

    $default  reduce using rule 43 (assignment_expression)


State 100

   22 multiplicative_expression: multiplicative_expression STAR unary_expression .

    $default  reduce using rule 22 (multiplicative_expression)


State 101

   23 multiplicative_expression: multiplicative_expression DIVIDE unary_expression .

    $default  reduce using rule 23 (multiplicative_expression)


State 102

   24 multiplicative_expression: multiplicative_expression PERCENTAGE unary_expression .

    $default  reduce using rule 24 (multiplicative_expression)


State 103

   21 multiplicative_expression: unary_expression .

    $default  reduce using rule 21 (multiplicative_expression)


State 104

   22 multiplicative_expression: multiplicative_expression . STAR unary_expression
   23                          | multiplicative_expression . DIVIDE unary_expression
   24                          | multiplicative_expression . PERCENTAGE unary_expression
   27 additive_expression: additive_expression STAR multiplicative_expression .

    STAR        shift, and go to state 68
    DIVIDE      shift, and go to state 69
    PERCENTAGE  shift, and go to state 70

    STAR      [reduce using rule 27 (additive_expression)]
    $default  reduce using rule 27 (additive_expression)


State 105

   22 multiplicative_expression: multiplicative_expression . STAR unary_expression
   23                          | multiplicative_expression . DIVIDE unary_expression
   24                          | multiplicative_expression . PERCENTAGE unary_expression
   26 additive_expression: additive_expression PLUS multiplicative_expression .

    STAR        shift, and go to state 68
    DIVIDE      shift, and go to state 69
    PERCENTAGE  shift, and go to state 70

    STAR      [reduce using rule 26 (additive_expression)]
    $default  reduce using rule 26 (additive_expression)


State 106

   26 additive_expression: additive_expression . PLUS multiplicative_expression
   27                    | additive_expression . STAR multiplicative_expression
   31 relational_expression: relational_expression LTE_OP additive_expression .

    STAR  shift, and go to state 71
    PLUS  shift, and go to state 72

    STAR      [reduce using rule 31 (relational_expression)]
    PLUS      [reduce using rule 31 (relational_expression)]
    $default  reduce using rule 31 (relational_expression)


State 107

   26 additive_expression: additive_expression . PLUS multiplicative_expression
   27                    | additive_expression . STAR multiplicative_expression
   32 relational_expression: relational_expression GTE_OP additive_expression .

    STAR  shift, and go to state 71
    PLUS  shift, and go to state 72

    STAR      [reduce using rule 32 (relational_expression)]
    PLUS      [reduce using rule 32 (relational_expression)]
    $default  reduce using rule 32 (relational_expression)


State 108

   26 additive_expression: additive_expression . PLUS multiplicative_expression
   27                    | additive_expression . STAR multiplicative_expression
   29 relational_expression: relational_expression LESS_THAN additive_expression .

    STAR  shift, and go to state 71
    PLUS  shift, and go to state 72

    STAR      [reduce using rule 29 (relational_expression)]
    PLUS      [reduce using rule 29 (relational_expression)]
    $default  reduce using rule 29 (relational_expression)


State 109

   26 additive_expression: additive_expression . PLUS multiplicative_expression
   27                    | additive_expression . STAR multiplicative_expression
   30 relational_expression: relational_expression GREATER_THAN additive_expression .

    STAR  shift, and go to state 71
    PLUS  shift, and go to state 72

    STAR      [reduce using rule 30 (relational_expression)]
    PLUS      [reduce using rule 30 (relational_expression)]
    $default  reduce using rule 30 (relational_expression)


State 110

   29 relational_expression: relational_expression . LESS_THAN additive_expression
   30                      | relational_expression . GREATER_THAN additive_expression
   31                      | relational_expression . LTE_OP additive_expression
   32                      | relational_expression . GTE_OP additive_expression
   34 equality_expression: equality_expression EQ_OP relational_expression .

    LTE_OP        shift, and go to state 73
    GTE_OP        shift, and go to state 74
    LESS_THAN     shift, and go to state 75
    GREATER_THAN  shift, and go to state 76

    $default  reduce using rule 34 (equality_expression)


State 111

   29 relational_expression: relational_expression . LESS_THAN additive_expression
   30                      | relational_expression . GREATER_THAN additive_expression
   31                      | relational_expression . LTE_OP additive_expression
   32                      | relational_expression . GTE_OP additive_expression
   35 equality_expression: equality_expression NE_OP relational_expression .

    LTE_OP        shift, and go to state 73
    GTE_OP        shift, and go to state 74
    LESS_THAN     shift, and go to state 75
    GREATER_THAN  shift, and go to state 76

    $default  reduce using rule 35 (equality_expression)


State 112

   34 equality_expression: equality_expression . EQ_OP relational_expression
   35                    | equality_expression . NE_OP relational_expression
   37 logical_AND_expression: logical_AND_expression AND_OP equality_expression .

    EQ_OP  shift, and go to state 77
    NE_OP  shift, and go to state 78

    $default  reduce using rule 37 (logical_AND_expression)


State 113

   41 conditional_expression: logical_OR_expression QUESTION_MARK expression . COLON conditional_expression

    COLON  shift, and go to state 125


State 114

   34 equality_expression: equality_expression . EQ_OP relational_expression
   35                    | equality_expression . NE_OP relational_expression
   39 logical_OR_expression: logical_OR_expression OR_OP equality_expression .

    EQ_OP  shift, and go to state 77
    NE_OP  shift, and go to state 78

    $default  reduce using rule 39 (logical_OR_expression)


State 115

   81 selection_statement: IF ROUND_BRACE_OPEN expression . ROUND_BRACE_CLOSE statement
   82                    | IF ROUND_BRACE_OPEN expression . ROUND_BRACE_CLOSE statement ELSE statement

    ROUND_BRACE_CLOSE  shift, and go to state 126


State 116

   83 iteration_statement: FOR ROUND_BRACE_OPEN expression_opt . SEMI_COLON expression_opt SEMI_COLON expression_opt ROUND_BRACE_CLOSE statement

    SEMI_COLON  shift, and go to state 127


State 117

   84 jump_statement: RETURN expression_opt SEMI_COLON .

    $default  reduce using rule 84 (jump_statement)


State 118

   66 parameter_declaration: type_specifier pointer_opt . identifier_opt

    IDENTIFIER  shift, and go to state 128

    $default  reduce using rule 65 (identifier_opt)

    identifier_opt  go to state 129


State 119

   56 direct_declarator: IDENTIFIER ROUND_BRACE_OPEN parameter_list_opt ROUND_BRACE_CLOSE .

    $default  reduce using rule 56 (direct_declarator)


State 120

   63 parameter_list: parameter_list COMMA . parameter_declaration

    VOID  shift, and go to state 1
    CHAR  shift, and go to state 2
    INT   shift, and go to state 3

    type_specifier         go to state 88
    parameter_declaration  go to state 130


State 121

   55 direct_declarator: IDENTIFIER SQ_BRACE_OPEN INTEGER_CONSTANT SQ_BRACE_CLOSE .

    $default  reduce using rule 55 (direct_declarator)


State 122

   10 postfix_expression: postfix_expression ROUND_BRACE_OPEN argument_expression_list_opt ROUND_BRACE_CLOSE .

    $default  reduce using rule 10 (postfix_expression)


State 123

   13 argument_expression_list: argument_expression_list COMMA . assignment_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 131


State 124

    9 postfix_expression: postfix_expression SQ_BRACE_OPEN expression SQ_BRACE_CLOSE .

    $default  reduce using rule 9 (postfix_expression)


State 125

   41 conditional_expression: logical_OR_expression QUESTION_MARK expression COLON . conditional_expression

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 103
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 132


State 126

   81 selection_statement: IF ROUND_BRACE_OPEN expression ROUND_BRACE_CLOSE . statement
   82                    | IF ROUND_BRACE_OPEN expression ROUND_BRACE_CLOSE . statement ELSE statement

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    CURLY_BRACE_OPEN    shift, and go to state 16
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29
    IF                  shift, and go to state 43
    FOR                 shift, and go to state 44
    RETURN              shift, and go to state 45

    IDENTIFIER          [reduce using rule 45 (expression_opt)]
    STRING_LITERAL      [reduce using rule 45 (expression_opt)]
    INTEGER_CONSTANT    [reduce using rule 45 (expression_opt)]
    CHARACTER_CONSTANT  [reduce using rule 45 (expression_opt)]
    CURLY_BRACE_OPEN    [reduce using rule 45 (expression_opt)]
    ROUND_BRACE_OPEN    [reduce using rule 45 (expression_opt)]
    BITWISEAND          [reduce using rule 45 (expression_opt)]
    STAR                [reduce using rule 45 (expression_opt)]
    PLUS                [reduce using rule 45 (expression_opt)]
    MINUS               [reduce using rule 45 (expression_opt)]
    EXCLAMATION         [reduce using rule 45 (expression_opt)]
    IF                  [reduce using rule 45 (expression_opt)]
    FOR                 [reduce using rule 45 (expression_opt)]
    RETURN              [reduce using rule 45 (expression_opt)]
    $default            reduce using rule 45 (expression_opt)

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 46
    expression_opt             go to state 47
    expression                 go to state 48
    statement                  go to state 133
    compound_statement         go to state 52
    expression_statement       go to state 56
    selection_statement        go to state 57
    iteration_statement        go to state 58
    jump_statement             go to state 59


State 127

   83 iteration_statement: FOR ROUND_BRACE_OPEN expression_opt SEMI_COLON . expression_opt SEMI_COLON expression_opt ROUND_BRACE_CLOSE statement

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    $default  reduce using rule 45 (expression_opt)

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 46
    expression_opt             go to state 134
    expression                 go to state 48


State 128

   64 identifier_opt: IDENTIFIER .

    $default  reduce using rule 64 (identifier_opt)


State 129

   66 parameter_declaration: type_specifier pointer_opt identifier_opt .

    $default  reduce using rule 66 (parameter_declaration)


State 130

   63 parameter_list: parameter_list COMMA parameter_declaration .

    $default  reduce using rule 63 (parameter_list)


State 131

   13 argument_expression_list: argument_expression_list COMMA assignment_expression .

    $default  reduce using rule 13 (argument_expression_list)


State 132

   41 conditional_expression: logical_OR_expression QUESTION_MARK expression COLON conditional_expression .

    $default  reduce using rule 41 (conditional_expression)


State 133

   81 selection_statement: IF ROUND_BRACE_OPEN expression ROUND_BRACE_CLOSE statement .
   82                    | IF ROUND_BRACE_OPEN expression ROUND_BRACE_CLOSE statement . ELSE statement

    ELSE  shift, and go to state 135

    ELSE      [reduce using rule 81 (selection_statement)]
    $default  reduce using rule 81 (selection_statement)


State 134

   83 iteration_statement: FOR ROUND_BRACE_OPEN expression_opt SEMI_COLON expression_opt . SEMI_COLON expression_opt ROUND_BRACE_CLOSE statement

    SEMI_COLON  shift, and go to state 136


State 135

   82 selection_statement: IF ROUND_BRACE_OPEN expression ROUND_BRACE_CLOSE statement ELSE . statement

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    CURLY_BRACE_OPEN    shift, and go to state 16
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29
    IF                  shift, and go to state 43
    FOR                 shift, and go to state 44
    RETURN              shift, and go to state 45

    IDENTIFIER          [reduce using rule 45 (expression_opt)]
    STRING_LITERAL      [reduce using rule 45 (expression_opt)]
    INTEGER_CONSTANT    [reduce using rule 45 (expression_opt)]
    CHARACTER_CONSTANT  [reduce using rule 45 (expression_opt)]
    CURLY_BRACE_OPEN    [reduce using rule 45 (expression_opt)]
    ROUND_BRACE_OPEN    [reduce using rule 45 (expression_opt)]
    BITWISEAND          [reduce using rule 45 (expression_opt)]
    STAR                [reduce using rule 45 (expression_opt)]
    PLUS                [reduce using rule 45 (expression_opt)]
    MINUS               [reduce using rule 45 (expression_opt)]
    EXCLAMATION         [reduce using rule 45 (expression_opt)]
    IF                  [reduce using rule 45 (expression_opt)]
    FOR                 [reduce using rule 45 (expression_opt)]
    RETURN              [reduce using rule 45 (expression_opt)]
    $default            reduce using rule 45 (expression_opt)

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 46
    expression_opt             go to state 47
    expression                 go to state 48
    statement                  go to state 137
    compound_statement         go to state 52
    expression_statement       go to state 56
    selection_statement        go to state 57
    iteration_statement        go to state 58
    jump_statement             go to state 59


State 136

   83 iteration_statement: FOR ROUND_BRACE_OPEN expression_opt SEMI_COLON expression_opt SEMI_COLON . expression_opt ROUND_BRACE_CLOSE statement

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29

    $default  reduce using rule 45 (expression_opt)

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 46
    expression_opt             go to state 138
    expression                 go to state 48


State 137

   82 selection_statement: IF ROUND_BRACE_OPEN expression ROUND_BRACE_CLOSE statement ELSE statement .

    $default  reduce using rule 82 (selection_statement)


State 138

   83 iteration_statement: FOR ROUND_BRACE_OPEN expression_opt SEMI_COLON expression_opt SEMI_COLON expression_opt . ROUND_BRACE_CLOSE statement

    ROUND_BRACE_CLOSE  shift, and go to state 139


State 139

   83 iteration_statement: FOR ROUND_BRACE_OPEN expression_opt SEMI_COLON expression_opt SEMI_COLON expression_opt ROUND_BRACE_CLOSE . statement

    IDENTIFIER          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    INTEGER_CONSTANT    shift, and go to state 22
    CHARACTER_CONSTANT  shift, and go to state 23
    CURLY_BRACE_OPEN    shift, and go to state 16
    ROUND_BRACE_OPEN    shift, and go to state 24
    BITWISEAND          shift, and go to state 25
    STAR                shift, and go to state 26
    PLUS                shift, and go to state 27
    MINUS               shift, and go to state 28
    EXCLAMATION         shift, and go to state 29
    IF                  shift, and go to state 43
    FOR                 shift, and go to state 44
    RETURN              shift, and go to state 45

    IDENTIFIER          [reduce using rule 45 (expression_opt)]
    STRING_LITERAL      [reduce using rule 45 (expression_opt)]
    INTEGER_CONSTANT    [reduce using rule 45 (expression_opt)]
    CHARACTER_CONSTANT  [reduce using rule 45 (expression_opt)]
    CURLY_BRACE_OPEN    [reduce using rule 45 (expression_opt)]
    ROUND_BRACE_OPEN    [reduce using rule 45 (expression_opt)]
    BITWISEAND          [reduce using rule 45 (expression_opt)]
    STAR                [reduce using rule 45 (expression_opt)]
    PLUS                [reduce using rule 45 (expression_opt)]
    MINUS               [reduce using rule 45 (expression_opt)]
    EXCLAMATION         [reduce using rule 45 (expression_opt)]
    IF                  [reduce using rule 45 (expression_opt)]
    FOR                 [reduce using rule 45 (expression_opt)]
    RETURN              [reduce using rule 45 (expression_opt)]
    $default            reduce using rule 45 (expression_opt)

    primary_expression         go to state 30
    postfix_expression         go to state 31
    unary_expression           go to state 32
    unary_operator             go to state 33
    multiplicative_expression  go to state 34
    additive_expression        go to state 35
    relational_expression      go to state 36
    equality_expression        go to state 37
    logical_AND_expression     go to state 38
    logical_OR_expression      go to state 39
    conditional_expression     go to state 40
    assignment_expression      go to state 46
    expression_opt             go to state 47
    expression                 go to state 48
    statement                  go to state 140
    compound_statement         go to state 52
    expression_statement       go to state 56
    selection_statement        go to state 57
    iteration_statement        go to state 58
    jump_statement             go to state 59


State 140

   83 iteration_statement: FOR ROUND_BRACE_OPEN expression_opt SEMI_COLON expression_opt SEMI_COLON expression_opt ROUND_BRACE_CLOSE statement .

    $default  reduce using rule 83 (iteration_statement)
